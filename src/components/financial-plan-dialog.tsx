"use client"
import React, { useState } from 'react';
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { useToast } from '@/hooks/use-toast';
import { generatePersonalizedFinancialPlan, GeneratePersonalizedFinancialPlanInput } from '@/ai/flows/personalized-financial-plan';
import { Loader2, BrainCircuit } from 'lucide-react';
import { ScrollArea } from './ui/scroll-area';

export function FinancialPlanDialog() {
  const [open, setOpen] = useState(false);
  const { toast } = useToast();
  const [income, setIncome] = useState('');
  const [expenses, setExpenses] = useState('');
  const [goals, setGoals] = useState('');
  const [plan, setPlan] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!income || !expenses || !goals) {
      toast({
        title: "Error",
        description: "Please fill in all fields.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setPlan('');
    try {
      const input: GeneratePersonalizedFinancialPlanInput = {
        income: parseFloat(income),
        expenses: parseFloat(expenses),
        financialGoals: goals,
      };
      const result = await generatePersonalizedFinancialPlan(input);
      setPlan(result.financialPlan);
    } catch (error) {
      toast({
        title: "AI Error",
        description: "Failed to generate financial plan. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button size="sm" variant="outline" className="h-9 gap-1">
           <BrainCircuit className="h-4 w-4" />
           <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
            AI Financial Plan
           </span>
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>AI Financial Plan</DialogTitle>
            <DialogDescription>
              Get a personalized financial plan generated by AI.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="income">Monthly Income ($)</Label>
              <Input id="income" type="number" value={income} onChange={(e) => setIncome(e.target.value)} placeholder="e.g. 5000" />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="expenses">Monthly Expenses ($)</Label>
              <Input id="expenses" type="number" value={expenses} onChange={(e) => setExpenses(e.target.value)} placeholder="e.g. 3500" />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="goals">Financial Goals</Label>
              <Textarea id="goals" placeholder="e.g., Save for a house, pay off debt" value={goals} onChange={(e) => setGoals(e.target.value)} />
            </div>
          </div>
          <DialogFooter>
            <Button type="submit" disabled={isLoading}>
              {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              {isLoading ? 'Generating...' : 'Generate Plan'}
            </Button>
          </DialogFooter>
        </form>
        {plan && (
            <div className="mt-4 rounded-md border bg-muted/50 p-4">
                <h4 className="font-semibold mb-2 text-foreground">Your Personalized Plan:</h4>
                <ScrollArea className="h-40">
                  <p className="text-sm text-muted-foreground whitespace-pre-wrap">{plan}</p>
                </ScrollArea>
            </div>
        )}
      </DialogContent>
    </Dialog>
  )
}
